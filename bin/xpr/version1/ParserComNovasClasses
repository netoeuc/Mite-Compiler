package xpr.version1;

import java_cup.runtime.*;
import java.util.*;
import arvore.*;
import arvore.expressao.*;
import arvore.comando.*;


/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal Object    OP_IGUAL;
terminal Object    OP_DIFERENTE;
terminal Object    OP_MAIOR_QUE;
terminal Object    OP_MENOR_QUE;
terminal Object    OP_MAIOR_OU_IGUAL;
terminal Object    OP_MENOR_OU_IGUAL;
    
terminal Object    SOMA;
terminal Object    SUB;
terminal Object    MULT;
terminal Object    DIV;
terminal Object    RESTO;
terminal Object    AND;
terminal Object    OR;
terminal Object    NOT;
    
terminal Object    ATRIBUICAO;
    
terminal Object    ABRE_PAR;
terminal Object    FECHA_PAR;
terminal Object    ABRE_CHAVE;
terminal Object    FECHA_CHAVE;
terminal Object    VIRGULA;
terminal Object    PONTO_VIRGULA;
terminal Object    DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
terminal String    STRING_LITERAL;
    
terminal Object    KEY_IF;
terminal Object    KEY_ELSE;
terminal Object    KEY_WHILE;
terminal Object    KEY_RETURN;
terminal Object    KEY_INT;
terminal Object    KEY_FLOAT;
terminal Object    KEY_CHAR;
terminal Object    KEY_STRING;
terminal Object    KEY_CALL;
terminal Object    KEY_DEF;
terminal Object    KEY_PRINT;


/***** Nao-terminais *****/

non terminal Programa programa;
non terminal DeclGlobal decl_global;
non terminal DeclVariavel decl_variavel;
non terminal LinkedList<String> lista_idents;
non terminal LinkedList<String> resto_lista_idents;
non terminal Tipo tipo;
non terminal DeclFuncao decl_funcao;
non terminal Assinatura assinatura;
non terminal ParamFormais param_formais;
non terminal RestoParamFormais resto_param_formais;
non terminal Bloco bloco;
non terminal LinkedList<Comando> lista_comandos;
non terminal Comando comando;
non terminal Atribuicao atribuicao;
non terminal Iteracao iteracao;
non terminal Decisao decisao;
non terminal Escrita escrita;
non terminal ChamadaFuncCmd chamada_func_cmd;
non terminal Retorno retorno;
non terminal ChamadaFunc chamada_func;
non terminal LinkedList<Expressao> lista_exprs;
non terminal LinkedList<Expressao> resto_lista_exprs;
non terminal Expressao expressao;
non terminal Expressao expr_basica;



/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left OP_IGUAL, OP_DIFERENTE, OP_MAIOR_QUE, OP_MENOR_QUE, OP_MAIOR_OU_IGUAL, OP_MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia

/***** A gramï¿½tica *****/
programa ::= programa:p decl_global:dec 
			{: p.add(dec); :}
          | /*vazio*/ 
          	{: RESULT = new Programa(); :}
          ;

decl_global ::= decl_variavel:d
				{: RESULT = d; :}
            | decl_funcao:d
            {: RESULT = d; :}
            ;
            
decl_variavel ::= lista_idents:ids DOIS_PONTOS tipo:t PONTO_VIRGULA
					{: RESULT = new DeclVariavel(ids, t); :} 
               ;
               
lista_idents ::= IDENTIFICADOR:id resto_lista_idents:r 
				{: r.addFirst(id); :} 
             ;

resto_lista_idents ::=  VIRGULA IDENTIFICADOR:id resto_lista_idents:r
						{: r.addFirst(id); :}
                     |  /* vazio */
                     {:RESULT = new RestoListaIdents();:}
                     ;

tipo ::= KEY_INT 
		{: RESULT = Tipo.INT; :}
		
		| KEY_CHAR 
		{: RESULT = Tipo.CHAR; :}
		
		| KEY_FLOAT
		{: RESULT = Tipo.FLOAT; :}
		 
		| KEY_STRING
		{: RESULT = Tipo.STRING; :}
		;

decl_funcao ::= assinatura:s bloco:b
				{:RESULT = new DeclFuncao(s, b); :} 
			;
				

assinatura ::= KEY_DEF IDENTIFICADOR:id ABRE_PAR param_formais:param FECHA_PAR DOIS_PONTOS tipo:tp
				{:RESULT = new Assinatura(id, param, tp); :}
             | KEY_DEF IDENTIFICADOR:id ABRE_PAR param_formais:param FECHA_PAR
             {:RESULT = new Assinatura(id, param); :}
             ;

param_formais ::= IDENTIFICADOR:id DOIS_PONTOS tipo:tp resto_param_formais:r 
				{:r.addFirst(id, tp);
				RESULT = new ParamFormais(r); :}
                | /*vazio*/ 
                {:RESULT = new ParamFormais(); :}
                ;
                  
resto_param_formais ::= VIRGULA IDENTIFICADOR:id DOIS_PONTOS tipo:tp resto_param_formais:r
						{:r.addFirst(id, tp); :}
                      | /*vazio*/
                      	{:RESULT = new RestoParamFormais(); :}
                      ; 

bloco ::= ABRE_CHAVE lista_comandos:l FECHA_CHAVE 
			{: RESULT = new Bloco(l);:} 
			;

lista_comandos ::= lista_comandos:l comando:c
					{:l.addLast(c);:}
				| /*vazio*/
				{:RESULT = new ListaComandos();:}
                 ;

comando  ::= decl_variavel:d
			{: RESULT = d; :}
			
           | atribuicao:at
           {: RESULT = at; :}
           
           | iteracao:i    
           {: RESULT = i; :}
                  
           | decisao:d 
             {: RESULT = d; :}
             
           | escrita:e
           {: RESULT = e; :}
           
           | retorno:r
           {: RESULT = r; :}
           
           | bloco:b
           {: RESULT = b; :}
           
           | chamada_func_cmd:c
           {: RESULT = c; :}
           ;

atribuicao ::= lista_idents:list ATRIBUICAO expressao:ex PONTO_VIRGULA 
			   {:RESULT = new Atribuicao(list, ex); :}
			 ;

iteracao ::= KEY_WHILE ABRE_PAR expressao:ex FECHA_PAR comando:cmd 
			{:RESULT = new Iteracao(ex, cmd); :}
			;

decisao ::= KEY_IF ABRE_PAR expressao:exp FECHA_PAR comando:cmdif KEY_ELSE comando:cmdelse
			{: RESULT = new Decisao(exp, cmdif, cmdelse);  :}

            | KEY_IF ABRE_PAR expressao:exp FECHA_PAR comando:cmd
            {: RESULT = new Decisao(exp, cmd);  :}
            
            ;

escrita ::= KEY_PRINT ABRE_PAR expressao:ex FECHA_PAR PONTO_VIRGULA 
			{:RESULT = new Escrita(ex); :}
			;

chamada_func_cmd ::= KEY_CALL chamada_func:c PONTO_VIRGULA 
					{: RESULT = new ChamadaFuncCmd(c); :}
					;

retorno ::= KEY_RETURN expressao:ex PONTO_VIRGULA 
			{: RESULT = new Retorno(ex); :}
			;

chamada_func ::= IDENTIFICADOR:id ABRE_PAR lista_exprs:list FECHA_PAR 
				{: RESULT = new ChamadaFunc(id, list); :}
				;




lista_exprs ::= expressao:ex resto_lista_exprs:r
				{:r.addFirst(ex);:}
              | /*vazio*/
              {:RESULT = new RestoListaExpr();:}
              ; 

resto_lista_exprs ::= resto_lista_exprs:r VIRGULA expressao:ex
					{:r.addLast(ex);:} //Add first?
                    | /*vazio*/
                    {:RESULT = new RestoListaExpr();:}
                    ;

expressao ::= expressao:esq SOMA expressao:dir
		{: RESULT = new ExpAritmetica(esq, dir, "+");  :}
        
        | expressao:esq SUB expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "-");  :}
        
        | expressao:esq MULT expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "*");  :}
        
        | expressao:esq DIV expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "/");  :}
        
        | expressao:esq RESTO expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "%");  :}
        
        | expressao:esq AND expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "and");  :}
        
        | expressao:esq OR expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "or");  :}
        
        | expressao:esq OP_IGUAL expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "==");  :}
        
        | expressao:esq OP_DIFERENTE expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "!=");  :}
        
        | expressao:esq OP_MENOR_QUE expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "<");  :}
        
        | expressao:esq OP_MENOR_OU_IGUAL expressao:dir
        {: RESULT = new ExpLogica(esq, dir, "<=");  :}
        
        | expressao:esq OP_MAIOR_OU_IGUAL expressao:dir
        {: RESULT = new ExpLogica(esq, dir, ">=");  :}
        
        | expressao:esq OP_MAIOR_QUE expressao:dir
        {: RESULT = new ExpLogica(esq, dir, ">");  :}
        
        | expr_basica:exp
        {:  RESULT = exp;  :}
        ;

expr_basica ::= ABRE_PAR expressao:exp FECHA_PAR 
				{: RESULT = exp;   :}

         | NOT expr_basica:exp
         {: RESULT = new ExpUnaria("not",exp);   :}
         
         | SUB expr_basica /*????????????*/
         
         
         | INT_LITERAL:lex
         {:  int valor = Integer.parseInt(lex); 
             RESULT = new IntLiteral(valor);    :}
         
         | CHAR_LITERAL:c
         {: RESULT = new CharLiteral(c);   :}
         
         | FLOAT_LITERAL:f
         {: RESULT = new FloatLiteral(f);   :}
         
         | STRING_LITERAL:lex
         {: RESULT = new StringLiteral(lex);   :}
         
         | IDENTIFICADOR:id
         {: RESULT = new StringLiteral(id); :}
         
         
         
         | chamada_func:c
         {: RESULT = c; :}
         ;

